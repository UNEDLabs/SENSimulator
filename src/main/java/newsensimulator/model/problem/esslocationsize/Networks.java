/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newsensimulator.model.problem.esslocationsize;

//import edu.uci.ics.jung.graph.SparseMultigraph;
//import edu.uci.ics.jung.graph.util.Pair;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import newsensimulator.model.problem.powerflow.PowerFlow;


/**
 *
 * @author Liss
 */
public class Networks {

//Cada lista de datos contiene en cada posici√≥n : (0) datos de lineas como arreglo,
//(1) datos de buses como arreglo, (2) lista de mallas fundamentales como lista,
    //(3) condiciones iniciales como arreglo y (4) basemva como entero    
    public List loadCivanlarData() {

        List data = new ArrayList();
        double[][] dataLine = {{1, 2, 0, 1e-4, 0, 1, 3,0.2},
        {1, 3, 0, 1e-4, 0, 1, 3,0.2},
        {1, 4, 0, 1e-4, 0, 1, 3,0.2},
        {2, 5, 0.075, 0.10, 0, 1, 22,0.2},
        {5, 6, 0.08, 0.11, 0, 1, 333,0.2},
        {5, 7, 0.09, 0.18, 0, 1, 3,0.2},
        {7, 8, 0.04, 0.04, 0, 1, 3,0.2},
        {3, 9, 0.11, 0.11, 0, 1, 222,0.2},
        {9, 10, 0.08, 0.11, 0, 1, 2,0.2},
        {9, 11, 0.11, 0.11, 0, 1, 2,0.2},
        {10, 12, 0.11, 0.11, 0, 1, 222,0.2},
        {10, 13, 0.08, 0.11, 0, 1, 1,0.2},
        {4, 14, 0.11, 0.11, 0, 1, 3,0.2},
        {14, 15, 0.09, 0.12, 0, 1, 3,0.2},
        {14, 16, 0.08, 0.11, 0, 1, 3,0.2},
        {16, 17, 0.04, 0.04, 0, 1, 2,0.2},
        {6, 12, 0.04, 0.04, 0, 1, 222,0.2},
        {11, 15, 0.04, 0.04, 0, 1, 222,0.2},
        {8, 17, 0.09, 0.12, 0, 1, 222,0.2}};

        double[][] dataBus = {{1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {5, 0, 1, 0, 2.0, 1.6, 0, 0, 0, 0, 0},
        {6, 0, 1, 0, 3.0, 0.4, 0, 0, 0, 0, 0},
        {7, 0, 1, 0, 2.0, -0.4, 0, 0, 0, 0, 0},
        {8, 0, 1, 0, 1.5, 1.2, 0, 0, 0, 0, 0},
        {9, 0, 1, 0, 4.0, 2.7, 0, 0, 0, 0, 0},
        {10, 0, 1, 0, 5.0, 1.8, 0, 0, 0, 0, 0},
        {11, 0, 1, 0, 1.0, 0.9, 0, 0, 0, 0, 0},
        {12, 0, 1, 0, 0.6, -0.5, 0, 0, 0, 0, 0},
        {13, 0, 1, 0, 4.5, -1.7, 0, 0, 0, 0, 0},
        {14, 0, 1, 0, 1.0, 0.9, 0, 0, 0, 0, 0},
        {15, 0, 1, 0, 1.0, -1.1, 0, 0, 0, 0, 0},
        {16, 0, 1, 0, 1.0, 0.9, 0, 0, 0, 0, 0},
        {17, 0, 1, 0, 2.1, -0.8, 0, 0, 0, 0, 0}};

        //Mallas fundamentales Civanlar
        List<Integer> MF1 = new ArrayList(Arrays.asList(1, 2, 4, 5, 17, 11, 9, 8)); //MF1 
        List<Integer> MF2 = new ArrayList(Arrays.asList(2, 3, 8, 10, 13, 14, 18)); //MF2 
//        List<Integer> MF3 = new ArrayList(Arrays.asList(1, 3, 4, 6, 7, 19, 15, 16, 13)); //Malla externa
        List<Integer> MF3 = new ArrayList(Arrays.asList(5, 6, 7, 19, 16, 15, 14, 18, 10, 9, 11, 17)); //malla adentro

//        List initialcondition = new ArrayList();
//        initialcondition.add(10);
//        initialcondition.add(11);
//        initialcondition.add(19);
        int[] initialcondition = {10, 11, 19};

        List cycles = Arrays.asList(MF1, MF2, MF3);

        data.add(dataLine);
        data.add(dataBus);
        data.add(cycles);
        data.add(initialcondition);
        data.add(100);

        return data;
    }

    public List loadBaranData() {
        List data = new ArrayList();

        //<editor-fold defaultstate="collapsed" desc="Matriz dataLine con las impedancias en p.u. (desde la Tesis)">
        double[][] dataLine = {{1, 2, 0.0058, 0.0029, 0, 1, 1,3},
        {2, 3, 0.0308, 0.0157, 0, 1, 333,3},
        {3, 4, 0.0228, 0.0116, 0, 1, 2,3},
        {4, 5, 0.0238, 0.0121, 0, 1, 0,3},
        {5, 6, 0.0511, 0.0441, 0, 1, 0,3},
        {6, 7, 0.0117, 0.0386, 0, 1, 3,3},
        {7, 8, 0.0444, 0.0147, 0, 1, 3,3},
        {8, 9, 0.0643, 0.0462, 0, 1, 3,3},
        {9, 10, 0.0651, 0.0462, 0, 1, 333,3},
        {10, 11, 0.0123, 0.0041, 0, 1, 2,3},
        {11, 12, 0.0234, 0.0077, 0, 1, 2,3},
        {12, 13, 0.0916, 0.0721, 0, 1, 2,3},
        {13, 14, 0.0338, 0.0445, 0, 1, 222,3},
        {14, 15, 0.0369, 0.0328, 0, 1, 2,3},
        {15, 16, 0.0466, 0.0340, 0, 1, 333,3},
        {16, 17, 0.0804, 0.1074, 0, 1, 2,3},
        {17, 18, 0.0457, 0.0358, 0, 1, 2,3},
        {2, 19, 0.0102, 0.0098, 0, 1, 3,3},
        {19, 20, 0.0939, 0.0846, 0, 1, 2,3},
        {20, 21, 0.0255, 0.0298, 0, 1, 2,3},
        {21, 22, 0.0442, 0.0585, 0, 1, 2,3},
        {3, 23, 0.0282, 0.0192, 0, 1, 333,3},
        {23, 24, 0.0560, 0.0442, 0, 1, 2,3},
        {24, 25, 0.0559, 0.0437, 0, 1, 0,3},
        {6, 26, 0.0127, 0.0065, 0, 1, 3,3},
        {26, 27, 0.0177, 0.0090, 0, 1, 0,3},
        {27, 28, 0.0661, 0.0583, 0, 1, 2,3},
        {28, 29, 0.0502, 0.0437, 0, 1, 333,3},
        {29, 30, 0.0317, 0.0161, 0, 1, 333,3},
        {30, 31, 0.0608, 0.0601, 0, 1, 2,3},
        {31, 32, 0.0194, 0.0226, 0, 1, 2,3},
        {32, 33, 0.0213, 0.0331, 0, 1, 2,3},
        {8, 21, 0.1248, 0.1248, 0, 1, 333,3},
        {9, 15, 0.1248, 0.1248, 0, 1, 333,3},
        {12, 22, 0.1248, 0.1248, 0, 1, 33,3},
        {18, 33, 0.0312, 0.0312, 0, 1, 333,3},
        {25, 29, 0.0312, 0.0312, 0, 1, 2,3}};

//        double[][] dataLine = {{ 1,   2,  0.0058,  0.0029,  0,  1},
////                               { 2,   3,  0.0308,  0.0157,  0,  1},
////                               { 3,   4,  0.0228,  0.0116,  0,  1},
//                               { 3,   4,  0.0238,  0.0121,  0,  1},
//                               { 4,   5,  0.0511,  0.0441,  0,  1},
//                               { 5,   6,  0.0117,  0.0386,  0,  1},
//                               { 6,   7,  0.0444,  0.0147,  0,  1},
////                               { 7,   8,  0.0643,  0.0462,  0,  1},
//                               { 8,  9,  0.0651,  0.0462,  0,  1},
//                               {9,  10,  0.0123,  0.0041,  0,  1},
//                               {10,  11,  0.0234,  0.0077,  0,  1},
//                               {11,  12,  0.0916,  0.0721,  0,  1},
//                               {12,  13,  0.0338,  0.0445,  0,  1},
//                               {13,  14,  0.0369,  0.0328,  0,  1},
//                               {14,  15,  0.0466,  0.0340,  0,  1},
//                               {15,  16,  0.0804,  0.1074,  0,  1},
//                               {16,  17,  0.0457,  0.0358,  0,  1},
//                               
//                               { 2,  18,  0.0102,  0.0098,  0,  1},
//                               {18,  19,  0.0939,  0.0846,  0,  1},
//                               {19,  20,  0.0255,  0.0298,  0,  1},
//                               {20,  21,  0.0442,  0.0585,  0,  1},
//                               
////                               { 3,  23,  0.0282,  0.0192,  0,  1},
//                               {22,  23,  0.0560,  0.0442,  0,  1},
//                               {23,  24,  0.0559,  0.0437,  0,  1},
//                               
//                               { 5,  25,  0.0127,  0.0065,  0,  1},
//                               {25,  26,  0.0177,  0.0090,  0,  1},
//                               {26,  27,  0.0661,  0.0583,  0,  1},
//                               {27,  28,  0.0502,  0.0437,  0,  1},
//                               {28,  29,  0.0317,  0.0161,  0,  1},
////                               {30,  31,  0.0608,  0.0601,  0,  1},
//                               {30,  31,  0.0194,  0.0226,  0,  1},
//                               {31,  32,  0.0213,  0.0331,  0,  1},
//                               
//                               { 7,  20,  0.1248,  0.1248,  0,  1},
////                               { 9,  15,  0.1248,  0.1248,  0,  1},
//                               {11,  21,  0.1248,  0.1248,  0,  1},
//                               {17,  32,  0.0312,  0.0312,  0,  1},
//                               {24,  28,  0.0312,  0.0312,  0,  1}};
//</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="Matriz dataLine con las impedancias de Baran1988 (en Ohm)">
//        double[][] dataLine = {{ 1,   2,  0.0922,  0.0470,  0,  1},
//                               { 2,   3,  0.4930,  0.2511,  0,  1},
//                               { 3,   4,  0.3660,  0.1864,  0,  1},
//                               { 4,   5,  0.3811,  0.1941,  0,  1},
//                               { 5,   6,  0.8190,  0.7070,  0,  1},
//                               { 6,   7,  0.1872,  0.6188,  0,  1},
//                               { 7,   8,  0.7114,  0.2351,  0,  1},
//                               { 8,   9,  1.0300,  0.7400,  0,  1},
//                               { 9,  10,  1.0440,  0.7400,  0,  1},
//                               {10,  11,  0.1966,  0.0650,  0,  1},
//                               {11,  12,  0.3744,  0.1238,  0,  1},
//                               {12,  13,  1.4680,  1.1550,  0,  1},
//                               {13,  14,  0.5416,  0.7129,  0,  1},
//                               {14,  15,  0.5910,  0.5260,  0,  1},
//                               {15,  16,  0.7463,  0.5450,  0,  1},
//                               {16,  17,  1.2890,  1.7210,  0,  1},
//                               {17,  18,  0.7320,  0.5740,  0,  1},
//                               
//                               { 2,  19,  0.1640,  0.1565,  0,  1},
//                               {19,  20,  1.5042,  1.3554,  0,  1},
//                               {20,  21,  0.4095,  0.4784,  0,  1},
//                               {21,  22,  0.7089,  0.9373,  0,  1},
//                               
//                               { 3,  23,  0.4512,  0.3083,  0,  1},
//                               {23,  24,  0.8980,  0.7091,  0,  1},
//                               {24,  25,  0.8960,  0.7011,  0,  1},
//                               
//                               { 6,  26,  0.2030,  0.1034,  0,  1},
//                               {26,  27,  0.2842,  0.1447,  0,  1},
//                               {27,  28,  1.0590,  0.9337,  0,  1},
//                               {28,  29,  0.8042,  0.7006,  0,  1},
//                               {29,  30,  0.5075,  0.2585,  0,  1},
//                               {30,  31,  0.9744,  0.9630,  0,  1},
//                               {31,  32,  0.3105,  0.3619,  0,  1},
//                               {32,  33,  0.3410,  0.5302,  0,  1},
//                               
//                               { 8,  21,  2.0000,  2.0000,  0,  1},
//                               { 9,  15,  2.0000,  2.0000,  0,  1},
//                               {12,  22,  2.0000,  2.0000,  0,  1},
//                               {18,  33,  0.5000,  0.5000,  0,  1},
//                               {25,  29,  0.5000,  0.5000,  0,  1}};
//        
//                double[][] auxDataLine = new double[dataLine.length][11];
//        
//                for (int i = 0; i < dataLine.length; i++) {
//                    for (int j = 0; j < dataLine[i].length; j++) {
//                        auxDataLine[i][j] = dataLine[i][j];
//                        if (j == 2 || j == 3) {
//                            auxDataLine[i][j] = dataLine[i][j] / 1;
//                            auxDataLine[i][j] = dataLine[i][j] / 16.02756;
//                            auxDataLine[i][j] = dataLine[i][j] / 1.296;
//
//                        } else {
//
//                        }
//                    }
//                }
//</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="Matriz dataBus con las cargas de Baran1988">
        double[][] dataBus = {{1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {2, 0, 1, 0, 0.100, 0.060, 0, 0, 0, 0, 0},
        {3, 0, 1, 0, 0.090, 0.040, 0, 0, 0, 0, 0},
        {4, 0, 1, 0, 0.120, 0.080, 0, 0, 0, 0, 0},
        {5, 0, 1, 0, 0.060, 0.030, 0, 0, 0, 0, 0},
        {6, 0, 1, 0, 0.060, 0.020, 0, 0, 0, 0, 0},
        {7, 0, 1, 0, 0.200, 0.100, 0, 0, 0, 0, 0},
        {8, 0, 1, 0, 0.200, 0.100, 0, 0, 0, 0, 0},
        {9, 0, 1, 0, 0.060, 0.020, 0, 0, 0, 0, 0},
        {10, 0, 1, 0, 0.060, 0.020, 0, 0, 0, 0, 0},
        {11, 0, 1, 0, 0.045, 0.030, 0, 0, 0, 0, 0},
        {12, 0, 1, 0, 0.060, 0.035, 0, 0, 0, 0, 0},
        {13, 0, 1, 0, 0.060, 0.035, 0, 0, 0, 0, 0},
        {14, 0, 1, 0, 0.120, 0.080, 0, 0, 0, 0, 0},
        {15, 0, 1, 0, 0.060, 0.010, 0, 0, 0, 0, 0},
        {16, 0, 1, 0, 0.060, 0.020, 0, 0, 0, 0, 0},
        {17, 0, 1, 0, 0.060, 0.020, 0, 0, 0, 0, 0},
        {18, 0, 1, 0, 0.090, 0.040, 0, 0, 0, 0, 0},
        {19, 0, 1, 0, 0.090, 0.040, 0, 0, 0, 0, 0},
        {20, 0, 1, 0, 0.090, 0.040, 0, 0, 0, 0, 0},
        {21, 0, 1, 0, 0.090, 0.040, 0, 0, 0, 0, 0},
        {22, 0, 1, 0, 0.090, 0.040, 0, 0, 0, 0, 0},
        {23, 0, 1, 0, 0.090, 0.050, 0, 0, 0, 0, 0},
        {24, 0, 1, 0, 0.420, 0.200, 0, 0, 0, 0, 0},
        {25, 0, 1, 0, 0.420, 0.200, 0, 0, 0, 0, 0},
        {26, 0, 1, 0, 0.060, 0.025, 0, 0, 0, 0, 0},
        {27, 0, 1, 0, 0.060, 0.025, 0, 0, 0, 0, 0},
        {28, 0, 1, 0, 0.060, 0.020, 0, 0, 0, 0, 0},
        {29, 0, 1, 0, 0.120, 0.070, 0, 0, 0, 0, 0},
        {30, 0, 1, 0, 0.200, 0.600, 0, 0, 0, 0, 0},
        {31, 0, 1, 0, 0.150, 0.070, 0, 0, 0, 0, 0},
        {32, 0, 1, 0, 0.210, 0.100, 0, 0, 0, 0, 0},
        {33, 0, 1, 0, 0.060, 0.040, 0, 0, 0, 0, 0}};

//</editor-fold>
        //Malla fundamentales Baran
        List<Integer> MF1 = new ArrayList(Arrays.asList(2, 3, 4, 5, 6, 7, 33, 20, 19, 18));
        List<Integer> MF2 = new ArrayList(Arrays.asList(12, 11, 10, 9, 34, 14, 13));
        List<Integer> MF3 = new ArrayList(Arrays.asList(8, 7, 6, 25, 26, 27, 28, 29, 30, 31, 32, 36, 17, 16, 15, 34));
        List<Integer> MF4 = new ArrayList(Arrays.asList(11, 35, 10, 9, 8, 33, 21));
        List<Integer> MF5 = new ArrayList(Arrays.asList(3, 4, 5, 25, 26, 27, 28, 37, 24, 23, 22));
        List cycles = Arrays.asList(MF1, MF2, MF3, MF4, MF5);

//        List initialcondition = new ArrayList();
//        initialcondition.add(7);
//        initialcondition.add(9);
//        initialcondition.add(14);
//        initialcondition.add(32);
//        initialcondition.add(37);
        
        int[] initialcondition = {7,9,14,32,37};
        
        data.add(dataLine);
        data.add(dataBus);
        data.add(cycles);
        data.add(initialcondition);
        data.add(10);
        return data;
    }

    public List loadColoColoData() {
        List data = new ArrayList();

        double[][] dataLine
                = {{1, 2, 0.0212000, 0.013700, 0, 1, 1},
                {2, 3, 0.0016000, 0.001000, 0, 1, 3},
                {3, 4, 0.0029000, 0.001900, 0, 1, 0},
                {4, 5, 0.0017000, 0.001100, 0, 1, 0},
                {5, 6, 0.0033000, 0.002200, 0, 1, 3},
                {6, 7, 0.0053000, 0.003400, 0, 1, 3},
                {7, 8, 0.0077000, 0.002600, 0, 1, 3},
                {8, 9, 0.0080000, 0.002700, 0, 1, 0},
                {1, 10, 0.0040000, 0.007500, 0, 1, 1},
                {10, 11, 0.0015000, 0.002900, 0, 1, 3},
                {11, 12, 0.0033000, 0.003200, 0, 1, 3},
                {12, 13, 0.0008000, 0.001600, 0, 1, 3},
                {13, 14, 0.0014000, 0.002700, 0, 1, 3},
                {14, 15, 0.0005000, 0.001000, 0, 1, 3},
                {15, 16, 0.0008000, 0.000800, 0, 1, 3},
                {16, 17, 0.0046000, 0.004600, 0, 1, 3},
                {17, 18, 0.0011000, 0.001100, 0, 1, 0},
                {1, 19, 0.0056000, 0.010400, 0, 1, 1},
                {19, 20, 0.0021000, 0.003200, 0, 1, 3},
                {20, 21, 0.0010000, 0.001500, 0, 1, 3},
                {21, 22, 0.0020000, 0.002000, 0, 1, 3},
                {22, 23, 0.0029000, 0.005300, 0, 1, 3},
                {23, 24, 0.0056000, 0.003600, 0, 1, 3},
                {24, 25, 0.0013000, 0.000900, 0, 1, 0},
                {25, 26, 0.0009000, 0.000600, 0, 1, 3},
                {1, 27, 0.0021000, 0.003200, 0, 1, 1},
                {27, 28, 0.0007000, 0.001000, 0, 1, 0},
                {28, 29, 0.0040000, 0.001400, 0, 1, 0},
                {29, 30, 0.0053000, 0.001800, 0, 1, 0},
                {30, 31, 0.0067000, 0.002300, 0, 1, 3},
                {28, 32, 0.0012000, 0.001800, 0, 1, 3},
                {32, 33, 0.0013000, 0.001300, 0, 1, 0},
                {33, 34, 0.0022000, 0.002200, 0, 1, 0},
                {32, 35, 0.0011000, 0.001600, 0, 1, 3},
                {35, 36, 0.0047000, 0.007100, 0, 1, 3},
                {36, 37, 0.0013000, 0.002000, 0, 1, 3},
                {37, 38, 0.0011000, 0.002000, 0, 1, 3},
                {38, 39, 0.0012000, 0.002300, 0, 1, 3},
                {39, 40, 0.0006000, 0.001100, 0, 1, 3},
                {1, 41, 0.0019000, 0.002400, 0, 1, 1},
                {41, 42, 0.0025000, 0.003100, 0, 1, 0},
                {42, 43, 0.0020000, 0.002400, 0, 1, 3},
                {43, 44, 0.0013000, 0.001500, 0, 1, 3},
                {44, 45, 0.0093000, 0.006000, 0, 1, 3},
                {45, 46, 0.0016000, 0.001000, 0, 1, 3},
                {46, 47, 0.0049000, 0.003200, 0, 1, 3},
                {47, 48, 0.0064000, 0.004100, 0, 1, 3},
                {44, 49, 0.0037000, 0.004500, 0, 1, 0},
                {49, 50, 0.0043000, 0.001400, 0, 1, 0},
                {49, 51, 0.0017000, 0.002100, 0, 1, 0},
                {51, 52, 0.0023000, 0.002800, 0, 1, 0},
                {52, 53, 0.0013000, 0.001600, 0, 1, 0},
                {53, 54, 0.0025000, 0.002500, 0, 1, 3},
                {54, 55, 0.0040000, 0.001400, 0, 1, 0},
                {55, 56, 0.0147000, 0.005000, 0, 1, 0},
                {54, 57, 0.0018000, 0.001800, 0, 1, 0},
                {57, 58, 0.0046000, 0.004600, 0, 1, 0},
                {58, 59, 0.0058000, 0.005700, 0, 1, 0},
                {59, 60, 0.0028000, 0.001800, 0, 1, 0},
                {1, 61, 0.0041000, 0.010400, 0, 1, 1},
                {61, 62, 0.0012000, 0.002300, 0, 1, 3},
                {62, 63, 0.0014000, 0.002100, 0, 1, 3},
                {63, 64, 0.0007000, 0.000700, 0, 1, 3},
                {64, 65, 0.0017000, 0.001700, 0, 1, 3},
                {65, 66, 0.0010000, 0.001500, 0, 1, 3},
                {66, 67, 0.0010000, 0.001400, 0, 1, 3},
                {67, 68, 0.0014000, 0.002100, 0, 1, 3},
                {68, 69, 0.0018000, 0.001800, 0, 1, 3},
                {69, 70, 0.0027000, 0.002600, 0, 1, 3},
                {70, 71, 0.0025000, 0.002500, 0, 1, 3},
                {71, 72, 0.0120000, 0.004100, 0, 1, 0},
                {71, 73, 0.0022000, 0.002200, 0, 1, 0},
                {73, 74, 0.0059000, 0.002000, 0, 1, 0},
                {74, 75, 0.0141000, 0.004800, 0, 1, 0},
                {75, 76, 0.0168000, 0.005700, 0, 1, 0},
                {73, 77, 0.0022000, 0.002200, 0, 1, 3},
                {77, 78, 0.0096000, 0.003300, 0, 1, 3},
                {77, 79, 0.0093000, 0.006000, 0, 1, 3},
                {77, 80, 0.0020000, 0.002000, 0, 1, 3},
                {80, 81, 0.0096000, 0.003300, 0, 1, 0},
                {80, 82, 0.0019000, 0.001900, 0, 1, 0},
                {82, 83, 0.0147000, 0.005000, 0, 1, 0},
                {83, 84, 0.0088000, 0.003000, 0, 1, 0},
                {82, 85, 0.0029000, 0.002900, 0, 1, 0},
                {1, 86, 0.0031000, 0.003800, 0, 1, 1},
                {86, 87, 0.0015000, 0.001800, 0, 1, 3},
                {87, 88, 0.0028000, 0.003400, 0, 1, 0},
                {88, 89, 0.0088000, 0.003000, 0, 1, 3},
                {89, 90, 0.0029000, 0.002900, 0, 1, 0},
                {89, 91, 0.0043000, 0.004200, 0, 1, 0},
                {91, 92, 0.0141000, 0.004800, 0, 1, 0},
                {91, 93, 0.0029000, 0.002900, 0, 1, 0},
                {93, 94, 0.0139000, 0.004700, 0, 1, 0},
                {89, 95, 0.0048000, 0.001600, 0, 1, 3},
                {95, 96, 0.0032000, 0.001100, 0, 1, 0},
                {96, 97, 0.0029000, 0.002900, 0, 1, 3},
                {97, 98, 0.0014000, 0.001400, 0, 1, 3},
                {98, 99, 0.0017000, 0.001700, 0, 1, 3},
                {99, 100, 0.0035000, 0.003500, 0, 1, 3},
                {100, 101, 0.0123000, 0.004200, 0, 1, 3},
                {101, 102, 0.0027000, 0.000900, 0, 1, 3},
                {102, 103, 0.0112000, 0.003800, 0, 1, 0},
                {102, 104, 0.0021000, 0.002100, 0, 1, 0},
                {104, 105, 0.0059000, 0.002000, 0, 1, 0},
                {104, 106, 0.0096000, 0.003300, 0, 1, 0},
                {104, 107, 0.0097000, 0.006300, 0, 1, 0},
                {107, 108, 0.0027000, 0.001700, 0, 1, 0},
                {104, 109, 0.0023000, 0.002200, 0, 1, 0},
                {109, 110, 0.0040000, 0.001400, 0, 1, 0},
                {109, 111, 0.0067000, 0.002300, 0, 1, 3},
                {111, 112, 0.0053000, 0.001800, 0, 1, 0},
                {1, 113, 0.0007000, 0.000800, 0, 1, 1},
                {113, 114, 0.0009000, 0.001000, 0, 1, 0},
                {114, 115, 0.0021000, 0.002600, 0, 1, 3},
                {115, 116, 0.0010000, 0.001200, 0, 1, 0},
                {116, 117, 0.0020000, 0.002400, 0, 1, 0},
                {117, 118, 0.0023000, 0.002800, 0, 1, 3},
                {118, 119, 0.0080000, 0.002700, 0, 1, 0},
                {118, 120, 0.0018000, 0.002200, 0, 1, 1},
                {120, 121, 0.0027000, 0.003200, 0, 1, 0},
                {120, 122, 0.0017000, 0.002100, 0, 1, 3},
                {122, 123, 0.0017000, 0.002100, 0, 1, 0},
                {123, 124, 0.0017000, 0.002000, 0, 1, 3},
                {122, 125, 0.0031000, 0.003800, 0, 1, 0},
                {125, 126, 0.0012000, 0.001500, 0, 1, 3},
                {126, 127, 0.0011000, 0.001300, 0, 1, 0},
                {127, 128, 0.0023000, 0.002200, 0, 1, 0},
                {128, 129, 0.0045000, 0.001500, 0, 1, 0},
                {129, 130, 0.0139000, 0.004700, 0, 1, 0},
                {127, 131, 0.0009000, 0.001100, 0, 1, 0},
                {131, 132, 0.0017000, 0.002100, 0, 1, 0},
                {132, 133, 0.0030000, 0.003600, 0, 1, 3},
                {133, 134, 0.0009000, 0.001000, 0, 1, 0},
                {134, 135, 0.0012000, 0.001500, 0, 1, 0},
                {135, 136, 0.0015000, 0.001900, 0, 1, 0},
                {136, 137, 0.0007000, 0.000800, 0, 1, 3},
                {137, 138, 0.0053000, 0.001800, 0, 1, 0},
                {137, 139, 0.0022000, 0.002200, 0, 1, 0},
                {139, 140, 0.0035000, 0.002200, 0, 1, 3},
                {140, 141, 0.0040000, 0.002100, 0, 1, 0},
                {140, 142, 0.0047000, 0.003000, 0, 1, 0},
                {142, 143, 0.0039000, 0.002000, 0, 1, 0},
                {142, 144, 0.0023000, 0.001500, 0, 1, 0},
                {144, 145, 0.0020000, 0.001300, 0, 1, 0},
                {145, 146, 0.0027000, 0.001700, 0, 1, 0},
                {146, 147, 0.0200000, 0.006800, 0, 1, 0},
                {146, 148, 0.0133000, 0.004500, 0, 1, 0},
                {148, 149, 0.0051000, 0.001700, 0, 1, 0},
                {149, 150, 0.0320000, 0.010900, 0, 1, 0},
                {148, 151, 0.0147000, 0.005000, 0, 1, 0},
                {151, 152, 0.0179000, 0.006100, 0, 1, 0},
                {151, 153, 0.0053000, 0.001800, 0, 1, 0},
                {153, 154, 0.0101000, 0.003400, 0, 1, 0},
                {154, 155, 0.0104000, 0.003500, 0, 1, 0},
                {154, 156, 0.0107000, 0.003600, 0, 1, 0},
                {156, 157, 0.0173000, 0.005900, 0, 1, 0},
                {156, 158, 0.0077000, 0.002600, 0, 1, 0},
                {158, 159, 0.0144000, 0.004900, 0, 1, 0},
                {158, 160, 0.0043000, 0.001400, 0, 1, 0},
                {158, 161, 0.0136000, 0.004600, 0, 1, 0},
                {158, 162, 0.0067000, 0.002300, 0, 1, 0},
                {162, 163, 0.0061000, 0.002100, 0, 1, 0},
                {42, 32, 0.0448000, 0.067400, 0, 1, 2},
                {41, 113, 0.0007000, 0.000800, 0, 1, 2},
                {48, 79, 0.0036000, 0.002300, 0, 1, 2},
                {40, 73, 0.0044000, 0.004400, 0, 1, 2},
                {71, 26, 0.0024000, 0.002300, 0, 1, 2},
                {26, 18, 0.0010000, 0.001000, 0, 1, 2},
                {17, 8, 0.0022000, 0.002200, 0, 1, 2},
                {8, 102, 0.0017000, 0.001700, 0, 1, 2},
                {139, 109, 0.0022000, 0.002200, 0, 1, 2},
                {140, 111, 0.0036000, 0.002300, 0, 1, 2},
                {88, 116, 0.0020000, 0.002400, 0, 1, 2},
                {91, 127, 0.0044000, 0.004400, 0, 1, 2}};

        double[][] dataBus
                = {{1, 1, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {2, 0, 1, 0, 0.08800, 0.04610, 0, 0, 0, 0, 0},
                {3, 0, 1, 0, 0.02400, 0.01090, 0, 0, 0, 0, 0},
                {4, 0, 1, 0, 0.03520, 0.01840, 0, 0, 0, 0, 0},
                {5, 0, 1, 0, 0.05280, 0.02760, 0, 0, 0, 0, 0},
                {6, 0, 1, 0, 0.01900, 0.00860, 0, 0, 0, 0, 0},
                {7, 0, 1, 0, 0.00970, 0.00440, 0, 0, 0, 0, 0},
                {8, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {9, 0, 1, 0, 0.00780, 0.00340, 0, 0, 0, 0, 0},
                {10, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {11, 0, 1, 0, 0.02630, 0.01170, 0, 0, 0, 0, 0},
                {12, 0, 1, 0, 0.03120, 0.01380, 0, 0, 0, 0, 0},
                {13, 0, 1, 0, 0.08230, 0.03640, 0, 0, 0, 0, 0},
                {14, 0, 1, 0, 0.03060, 0.01350, 0, 0, 0, 0, 0},
                {15, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {16, 0, 1, 0, 0.04060, 0.01800, 0, 0, 0, 0, 0},
                {17, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {18, 0, 1, 0, 0.01710, 0.00730, 0, 0, 0, 0, 0},
                {19, 0, 1, 0, 0.04630, 0.01470, 0, 0, 0, 0, 0},
                {20, 0, 1, 0, 0.03010, 0.00960, 0, 0, 0, 0, 0},
                {21, 0, 1, 0, 0.04400, 0.01400, 0, 0, 0, 0, 0},
                {22, 0, 1, 0, 0.03470, 0.01100, 0, 0, 0, 0, 0},
                {23, 0, 1, 0, 0.02540, 0.00810, 0, 0, 0, 0, 0},
                {24, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {25, 0, 1, 0, 0.01280, -0.04120, 0, 0, 0, 0, 0},
                {26, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {27, 0, 1, 0, 0.01500, 0.00560, 0, 0, 0, 0, 0},
                {28, 0, 1, 0, 0.01870, 0.00700, 0, 0, 0, 0, 0},
                {29, 0, 1, 0, 0.00110, 0.00040, 0, 0, 0, 0, 0},
                {30, 0, 1, 0, 0.00640, 0.00240, 0, 0, 0, 0, 0},
                {31, 0, 1, 0, 0.02310, 0.00820, 0, 0, 0, 0, 0},
                {32, 0, 1, 0, 0.00000, -0.04500, 0, 0, 0, 0, 0},
                {33, 0, 1, 0, 0.01150, 0.00430, 0, 0, 0, 0, 0},
                {34, 0, 1, 0, 0.02140, 0.00810, 0, 0, 0, 0, 0},
                {35, 0, 1, 0, 0.00180, 0.00070, 0, 0, 0, 0, 0},
                {36, 0, 1, 0, 0.03930, 0.01480, 0, 0, 0, 0, 0},
                {37, 0, 1, 0, 0.08530, 0.03210, 0, 0, 0, 0, 0},
                {38, 0, 1, 0, 0.03500, 0.01320, 0, 0, 0, 0, 0},
                {39, 0, 1, 0, 0.04850, 0.01820, 0, 0, 0, 0, 0},
                {40, 0, 1, 0, 0.03110, 0.01170, 0, 0, 0, 0, 0},
                {41, 0, 1, 0, 0.00150, 0.00060, 0, 0, 0, 0, 0},
                {42, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {43, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {44, 0, 1, 0, 0.02800, 0.01070, 0, 0, 0, 0, 0},
                {45, 0, 1, 0, 0.01210, 0.00480, 0, 0, 0, 0, 0},
                {46, 0, 1, 0, 0.01770, 0.00750, 0, 0, 0, 0, 0},
                {47, 0, 1, 0, 0.02520, 0.01010, 0, 0, 0, 0, 0},
                {48, 0, 1, 0, 0.02420, 0.00970, 0, 0, 0, 0, 0},
                {49, 0, 1, 0, 0.01820, 0.00660, 0, 0, 0, 0, 0},
                {50, 0, 1, 0, 0.00620, 0.00220, 0, 0, 0, 0, 0},
                {51, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {52, 0, 1, 0, 0.01040, 0.00370, 0, 0, 0, 0, 0},
                {53, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {54, 0, 1, 0, 0.01060, 0.00450, 0, 0, 0, 0, 0},
                {55, 0, 1, 0, 0.01570, 0.00600, 0, 0, 0, 0, 0},
                {56, 0, 1, 0, 0.01920, 0.00730, 0, 0, 0, 0, 0},
                {57, 0, 1, 0, 0.00380, 0.00140, 0, 0, 0, 0, 0},
                {58, 0, 1, 0, 0.02580, 0.01030, 0, 0, 0, 0, 0},
                {59, 0, 1, 0, 0.04250, 0.01700, 0, 0, 0, 0, 0},
                {60, 0, 1, 0, 0.02210, 0.00880, 0, 0, 0, 0, 0},
                {61, 0, 1, 0, 0.03570, 0.01060, 0, 0, 0, 0, 0},
                {62, 0, 1, 0, 0.02680, 0.00800, 0, 0, 0, 0, 0},
                {63, 0, 1, 0, 0.05000, 0.01490, 0, 0, 0, 0, 0},
                {64, 0, 1, 0, 0.04200, 0.01250, 0, 0, 0, 0, 0},
                {65, 0, 1, 0, 0.02950, 0.00880, 0, 0, 0, 0, 0},
                {66, 0, 1, 0, 0.01080, 0.00320, 0, 0, 0, 0, 0},
                {67, 0, 1, 0, 0.03450, 0.01020, 0, 0, 0, 0, 0},
                {68, 0, 1, 0, 0.02420, 0.00720, 0, 0, 0, 0, 0},
                {69, 0, 1, 0, 0.03110, 0.00920, 0, 0, 0, 0, 0},
                {70, 0, 1, 0, 0.01340, -0.07130, 0, 0, 0, 0, 0},
                {71, 0, 1, 0, 0.02000, 0.00550, 0, 0, 0, 0, 0},
                {72, 0, 1, 0, 0.00520, 0.00100, 0, 0, 0, 0, 0},
                {73, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {74, 0, 1, 0, 0.01540, 0.00420, 0, 0, 0, 0, 0},
                {75, 0, 1, 0, 0.01480, 0.00410, 0, 0, 0, 0, 0},
                {76, 0, 1, 0, 0.00830, 0.00160, 0, 0, 0, 0, 0},
                {77, 0, 1, 0, 0.01190, 0.00330, 0, 0, 0, 0, 0},
                {78, 0, 1, 0, 0.00520, 0.00100, 0, 0, 0, 0, 0},
                {79, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {80, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {81, 0, 1, 0, 0.02050, 0.00560, 0, 0, 0, 0, 0},
                {82, 0, 1, 0, 0.01090, 0.00300, 0, 0, 0, 0, 0},
                {83, 0, 1, 0, 0.01490, 0.00440, 0, 0, 0, 0, 0},
                {84, 0, 1, 0, 0.01000, 0.00300, 0, 0, 0, 0, 0},
                {85, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {86, 0, 1, 0, 0.01340, 0.00630, 0, 0, 0, 0, 0},
                {87, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {88, 0, 1, 0, 0.02320, -0.06340, 0, 0, 0, 0, 0},
                {89, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {90, 0, 1, 0, 0.02530, 0.01180, 0, 0, 0, 0, 0},
                {91, 0, 1, 0, 0.00370, 0.00170, 0, 0, 0, 0, 0},
                {92, 0, 1, 0, 0.02630, 0.01280, 0, 0, 0, 0, 0},
                {93, 0, 1, 0, 0.02780, 0.01250, 0, 0, 0, 0, 0},
                {94, 0, 1, 0, 0.02580, 0.01160, 0, 0, 0, 0, 0},
                {95, 0, 1, 0, 0.02450, 0.01140, 0, 0, 0, 0, 0},
                {96, 0, 1, 0, 0.00850, 0.00400, 0, 0, 0, 0, 0},
                {97, 0, 1, 0, 0.03480, 0.01630, 0, 0, 0, 0, 0},
                {98, 0, 1, 0, 0.03490, 0.01630, 0, 0, 0, 0, 0},
                {99, 0, 1, 0, 0.02380, 0.01110, 0, 0, 0, 0, 0},
                {100, 0, 1, 0, 0.01420, 0.00660, 0, 0, 0, 0, 0},
                {101, 0, 1, 0, 0.01190, 0.00540, 0, 0, 0, 0, 0},
                {102, 0, 1, 0, 0.01410, 0.00640, 0, 0, 0, 0, 0},
                {103, 0, 1, 0, 0.00500, 0.00220, 0, 0, 0, 0, 0},
                {104, 0, 1, 0, 0.00280, 0.00130, 0, 0, 0, 0, 0},
                {105, 0, 1, 0, 0.00230, 0.00110, 0, 0, 0, 0, 0},
                {106, 0, 1, 0, 0.01330, 0.00620, 0, 0, 0, 0, 0},
                {107, 0, 1, 0, 0.00390, 0.00180, 0, 0, 0, 0, 0},
                {108, 0, 1, 0, 0.01590, 0.00870, 0, 0, 0, 0, 0},
                {109, 0, 1, 0, 0.01350, 0.00610, 0, 0, 0, 0, 0},
                {110, 0, 1, 0, 0.00500, 0.00230, 0, 0, 0, 0, 0},
                {111, 0, 1, 0, 0.01160, 0.00500, 0, 0, 0, 0, 0},
                {112, 0, 1, 0, 0.00770, 0.00330, 0, 0, 0, 0, 0},
                {113, 0, 1, 0, 0.00470, 0.00140, 0, 0, 0, 0, 0},
                {114, 0, 1, 0, 0.00920, 0.00280, 0, 0, 0, 0, 0},
                {115, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {116, 0, 1, 0, 0.00000, -0.04500, 0, 0, 0, 0, 0},
                {117, 0, 1, 0, 0.00780, 0.00220, 0, 0, 0, 0, 0},
                {118, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {119, 0, 1, 0, 0.01020, 0.00280, 0, 0, 0, 0, 0},
                {120, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {121, 0, 1, 0, 0.01140, 0.00290, 0, 0, 0, 0, 0},
                {122, 0, 1, 0, 0.00780, 0.00200, 0, 0, 0, 0, 0},
                {123, 0, 1, 0, 0.00160, 0.00040, 0, 0, 0, 0, 0},
                {124, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {125, 0, 1, 0, 0.00000, -0.04500, 0, 0, 0, 0, 0},
                {126, 0, 1, 0, 0.00380, 0.00110, 0, 0, 0, 0, 0},
                {127, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {128, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {129, 0, 1, 0, 0.01190, 0.00300, 0, 0, 0, 0, 0},
                {130, 0, 1, 0, 0.00930, 0.00230, 0, 0, 0, 0, 0},
                {131, 0, 1, 0, 0.03060, 0.00690, 0, 0, 0, 0, 0},
                {132, 0, 1, 0, 0.00820, 0.00230, 0, 0, 0, 0, 0},
                {133, 0, 1, 0, 0.01010, 0.00250, 0, 0, 0, 0, 0},
                {134, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {135, 0, 1, 0, 0.00000, -0.07500, 0, 0, 0, 0, 0},
                {136, 0, 1, 0, 0.01810, 0.00440, 0, 0, 0, 0, 0},
                {137, 0, 1, 0, 0.00250, 0.00070, 0, 0, 0, 0, 0},
                {138, 0, 1, 0, 0.01370, 0.00280, 0, 0, 0, 0, 0},
                {139, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {140, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {141, 0, 1, 0, 0.01460, 0.00300, 0, 0, 0, 0, 0},
                {142, 0, 1, 0, 0.00440, 0.00110, 0, 0, 0, 0, 0},
                {143, 0, 1, 0, 0.05470, 0.01140, 0, 0, 0, 0, 0},
                {144, 0, 1, 0, 0.00460, 0.00100, 0, 0, 0, 0, 0},
                {145, 0, 1, 0, 0.04290, 0.00890, 0, 0, 0, 0, 0},
                {146, 0, 1, 0, 0.00590, 0.00150, 0, 0, 0, 0, 0},
                {147, 0, 1, 0, 0.00960, 0.00240, 0, 0, 0, 0, 0},
                {148, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {149, 0, 1, 0, 0.00730, 0.00180, 0, 0, 0, 0, 0},
                {150, 0, 1, 0, 0.01350, 0.00340, 0, 0, 0, 0, 0},
                {151, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {152, 0, 1, 0, 0.03420, 0.00710, 0, 0, 0, 0, 0},
                {153, 0, 1, 0, 0.00680, 0.00140, 0, 0, 0, 0, 0},
                {154, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {155, 0, 1, 0, 0.00910, 0.00190, 0, 0, 0, 0, 0},
                {156, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {157, 0, 1, 0, 0.00210, 0.00040, 0, 0, 0, 0, 0},
                {158, 0, 1, 0, 0.00000, 0.00000, 0, 0, 0, 0, 0},
                {159, 0, 1, 0, 0.02280, 0.00470, 0, 0, 0, 0, 0},
                {160, 0, 1, 0, 0.00680, 0.00140, 0, 0, 0, 0, 0},
                {161, 0, 1, 0, 0.03650, 0.00760, 0, 0, 0, 0, 0},
                {162, 0, 1, 0, 0.03720, 0.00770, 0, 0, 0, 0, 0},
                {163, 0, 1, 0, 0.00460, 0.00100, 0, 0, 0, 0, 0}};

        List<Integer> MF1 = new ArrayList(Arrays.asList(42, 43, 44, 45, 46, 47, 165, 78, 76, 166, 39, 38, 37, 36, 35, 34, 163));
        List<Integer> MF2 = new ArrayList(Arrays.asList(26, 27, 31, 34, 35, 36, 36, 37, 38, 39, 166, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72));
        List<Integer> MF3 = new ArrayList(Arrays.asList(60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 167, 18, 19, 20, 21, 22, 23, 24, 25));
        List<Integer> MF4 = new ArrayList(Arrays.asList(18, 19, 20, 21, 22, 23, 24, 25, 9, 10, 11, 12, 13, 14, 15, 16, 17, 168));
        List<Integer> MF5 = new ArrayList(Arrays.asList(9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7, 169));
        List<Integer> MF6 = new ArrayList(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 170));
        List<Integer> MF7 = new ArrayList(Arrays.asList(94, 95, 96, 97, 98, 99, 100, 101, 90, 174, 130, 131, 132, 133, 134, 135, 136, 138, 171, 108, 103));
        List<Integer> MF8 = new ArrayList(Arrays.asList(88, 90, 174, 126, 125, 124, 121, 119, 117, 116, 173));
        List<Integer> MF9 = new ArrayList(Arrays.asList(112, 113, 114, 115, 173, 87, 86, 85));
        List<Integer> MF10 = new ArrayList(Arrays.asList(40, 164, 112));
        List<Integer> MF11 = new ArrayList(Arrays.asList(171, 172, 110, 139));
        List<Integer> MF12 = new ArrayList(Arrays.asList(40, 41, 163, 31, 27, 26));

        List cycles = Arrays.asList(MF1, MF2, MF3, MF4, MF5, MF6, MF7, MF8, MF9, MF10, MF11, MF12);
        List initialcondition = new ArrayList(Arrays.asList(6, 70, 78, 99, 163, 164, 166, 168, 171, 172, 173, 174));
        data.add(dataLine);
        data.add(dataBus);
        data.add(cycles);
        data.add(initialcondition);
        data.add(10);

        return data;

    }

//    public SparseMultigraph networkAsGraph(double[][] dataline) {
//        SparseMultigraph<Integer, Integer> graph;
//
//        graph = new SparseMultigraph();
//
//        for (int i = 0; i < dataline.length; i++) {
//            graph.addEdge((int) i + 1, new Pair((int) dataline[i][0], (int) dataline[i][1]));
//        }
//
//        return graph;
//    }

//Retornar√° lista con 4 cosas: Una lista con cada DataBus (arreglo) por Hora, 
//   un arreglo con el DataLine, una lista con la demanda total por hora, y un array con las lineas abiertas
    public List perHour() {
        List network = loadCivanlarData();
//        List network = loadBaranData();
        double[][] dataBus = (double[][]) network.get(1);
        double[][] dataBus2 = dataBus.clone();

        //Residencial
        double[] percent1 = {0.30, 0.26, 0.24, 0.22, 0.20, 0.30, 0.38, 0.50, 0.55, 0.55, 0.58, 0.60, 0.55, 0.50, 0.48, 0.50, 0.70, 1.00, 0.95, 0.90, 0.82, 0.75, 0.60, 0.40};
        //Comercial
        double[] percent2 = {0.20, 0.20, 0.19, 0.18, 0.20, 0.22, 0.25, 0.4, 0.7, 0.85, 0.91, 0.93, 0.89, 0.93, 0.94, 0.95, 1.00, 0.90, 0.75, 0.70, 0.65, 0.55, 0.30, 0.20};
        //Industrial 
        double[] percent3 = {0.55, 0.53, 0.51, 0.50, 0.55, 0.59, 0.70, 0.80, 0.92, 1.00, 0.98, 0.95, 0.94, 0.98, 0.90, 0.85, 0.80, 0.73, 0.73, 0.71, 0.70, 0.70, 0.65, 0.60};

        List dataBuses = new ArrayList();
        List totalLoad = new ArrayList();
        for (int k = 0; k < 24; k++) {
            //TEST PARA BARAN
//            double[][] dataTest = new double[33][11];
//                    
//            for (int i = 0; i < dataBus2.length; i++) {
//                System.arraycopy(dataBus2[i], 0, dataTest[i], 0, dataBus2[0].length);
//            }
//
//            double totalLoadMW = 0;
//            for (int i = 0; i < 10; i++) {
//
//                dataTest[i][4] = dataTest[i][4] * percent2[k];
//                totalLoadMW += dataTest[i][4];
//            }
//            for (int i = 10; i < 25; i++) {
//
//                dataTest[i][4] = dataTest[i][4] * percent1[k];
//                totalLoadMW += dataTest[i][4];
//            }
//            for (int i = 25; i < 33; i++) {
//
//                dataTest[i][4] = dataTest[i][4] * percent3[k];
//                totalLoadMW += dataTest[i][4];
//            }
            
//            //TEST PARA CIVANLAR
            double[][] dataTest = new double[17][11];
                    
            for (int i = 0; i < dataBus2.length; i++) {
                System.arraycopy(dataBus2[i], 0, dataTest[i], 0, dataBus2[0].length);
            }

            double totalLoadMW = 0;
            for (int i = 0; i < 6; i++) {

                dataTest[i][4] = dataTest[i][4] * percent2[k];
                totalLoadMW += dataTest[i][4];
            }
            for (int i = 6; i < 12; i++) {

                dataTest[i][4] = dataTest[i][4] * percent1[k];
                totalLoadMW += dataTest[i][4];
            }
            for (int i = 12; i < 17; i++) {

                dataTest[i][4] = dataTest[i][4] * percent3[k];
                totalLoadMW += dataTest[i][4];
            }

            dataBuses.add(dataTest);
            totalLoad.add(totalLoadMW);


        }

        List datas = new ArrayList();
        datas.add(dataBuses);
        datas.add((double[][]) network.get(0));
        datas.add(totalLoad);
        datas.add((int[]) network.get(3));
        //Retornar√° lista con 4 cosas: Una lista con cada DataBus (arreglo) por Hora, un arreglo con el DataLine, una lista con la demanda total por hora, y un array con las lineas abiertas
        return datas;

    }

    public void powerFlows() {
        List data = perHour();
        List losses = new ArrayList();
        List voltage = new ArrayList();
        List loadability = new ArrayList();
        List databuses = (List) data.get(0);
//        double[] max = {0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2,0.2,0.2,0.2,0.2,0.2};
        for (Object databuse : databuses) {
            PowerFlow flow = new PowerFlow((double[][]) data.get(1), (double[][]) databuse, (int[]) data.get(3));
            flow.runLoadFlow();
            voltage.add(flow.getMagVoltBusAsList());
            losses.add(flow.getMWTotalLoss());
//            loadability.add(Arrays.asList(flow.getLoadability(max)));
        }
        System.out.println(losses);
        System.out.println(data.get(2));
        for (int i = 0; i < voltage.size(); i++) {
            System.out.println(voltage.get(i));
        }
        for (int i = 0; i < loadability.size(); i++) {
            System.out.println(loadability.get(i));
        }

        int[] nodes = {9, 13, 15};
        double power = 2.65 / 3;
        List load = (List) data.get(2);
        double l = 0;
        for (int i = 0; i < 6; i++) {
            double[][] b = (double[][]) databuses.get(i);
            for (int j = 0; j < nodes.length; j++) {
                b[nodes[j] - 1][4] = b[nodes[j] - 1][4] + power;
            }
            l = (double) load.get(i) + power * 3;
            load.set(i, l);
        }
        //descarga de bess
        l = 0;
        for (int i = 16; i < 20; i++) {
            double[][] b = (double[][]) databuses.get(i);
            for (int j = 0; j < nodes.length; j++) {
                b[nodes[j] - 1][6] = b[nodes[j] - 1][6] + power;
            }
            l = (double) load.get(i) - power * 3;
            load.set(i, l);
        }
        
        losses.clear();
        voltage.clear();
        loadability.clear();
        for (Object databuse : databuses) {
            PowerFlow flow = new PowerFlow((double[][]) data.get(1), (double[][]) databuse, (int[]) data.get(3));
            flow.runLoadFlow();
            voltage.add(flow.getMagVoltBusAsList());
            losses.add(flow.getMWTotalLoss());
//            loadability.add(Arrays.asList(flow.getLoadability(max)));

        }

        System.out.println(losses);
        System.out.println(load);
        for (int i = 0; i < voltage.size(); i++) {
            System.out.println(voltage.get(i));
        }
        for (int i = 0; i < loadability.size(); i++) {
            System.out.println(loadability.get(i));
        }

    }

    public static void main(String[] args) {
        Networks asdf = new Networks();
        asdf.powerFlows();
    }

}
