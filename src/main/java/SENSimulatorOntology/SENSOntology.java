// file: SENSOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package SENSimulatorOntology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: SENSOntology.java
 * @author ontology bean generator
 * @version 2014/07/18, 02:33:21
 */
public class SENSOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "SENS";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new SENSOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String LOOPMANAGER_LOOPMANAGER="loopManager";
    public static final String LOOPMANAGER="LoopManager";
    public static final String LOOPREQUEST_LOOPREQUEST="loopRequest";
    public static final String LOOPREQUEST="LoopRequest";
    public static final String AGENTSTATE_BUS="BUS";
    public static final String AGENTSTATE="AgentState";
    public static final String VOLTAGEBEFOREBLACKOUT_VBEFOREBLACKOUT="VBeforeBlackout";
    public static final String VOLTAGEBEFOREBLACKOUT="VoltageBeforeBlackout";
    public static final String REPORTALONEAGENTSTATE_REPORTALONEAGENTSTATE="reportAloneAgentState";
    public static final String REPORTALONEAGENTSTATE="ReportAloneAgentState";
    public static final String SEARCHINGNEIGHBORS_LINE="line";
    public static final String SEARCHINGNEIGHBORS="SearchingNeighbors";
    public static final String SPREADINGMESSAGE_FUNDAMENTALLOOPS="fundamentalLoops";
    public static final String SPREADINGMESSAGE="SpreadingMessage";
    public static final String NEIGHBORHOOD_NEIGHBORS="NEIGHBORS";
    public static final String NEIGHBORHOOD="Neighborhood";
    public static final String STATUSNODE_NODE="NODE";
    public static final String STATUSNODE="StatusNode";
    public static final String CHANGELINESTATE_LINENAME="LINEName";
    public static final String CHANGELINESTATE_LINESTATE="LineState";
    public static final String CHANGELINESTATE="ChangeLineState";
    public static final String BUS_SWITCHS="switchs";
    public static final String BUS_NODE="node";
    public static final String BUS_NEIGHBORS="neighbors";
    public static final String BUS_LOADS="loads";
    public static final String BUS_GENERATORS="generators";
    public static final String BUS_ELECTRICALVEHICLES="electricalVehicles";
    public static final String BUS="Bus";
    public static final String NODE_VOLTAGE="voltage";
    public static final String NODE_BUSNAME="busName";
    public static final String NODE_INFAULT="inFault";
    public static final String NODE_ANGLE="angle";
    public static final String NODE="Node";
    public static final String GENERATORS_GENERATORNAME="generatorName";
    public static final String GENERATORS_GENERATORCOUNT="generatorCount";
    public static final String GENERATORS_TOTALGENERATION="totalGeneration";
    public static final String GENERATORS="Generators";
    public static final String NEIGHBORS_NEIGHBORNAME="neighborName";
    public static final String NEIGHBORS_NEIGHBORCOUNT="neighborCount";
    public static final String NEIGHBORS="Neighbors";
    public static final String SWITCHS_SWITCHNAME="switchName";
    public static final String SWITCHS_SWITCHSTATE="switchState";
    public static final String SWITCHS_SWITCHCOUNT="switchCount";
    public static final String SWITCHS="Switchs";
    public static final String FUNDAMENTALLOOPS_LINESTATELOOP="LineStateLoop";
    public static final String FUNDAMENTALLOOPS_NODENAME="NodeName";
    public static final String FUNDAMENTALLOOPS_LINELOOP="LineLoop";
    public static final String FUNDAMENTALLOOPS_LOOP="Loop";
    public static final String FUNDAMENTALLOOPS_NODESTATE="NodeState";
    public static final String FUNDAMENTALLOOPS_LINESTATE="LINEState";
    public static final String FUNDAMENTALLOOPS_LINENAME="LINEName";
    public static final String FUNDAMENTALLOOPS="FundamentalLoops";
    public static final String LINES_ISMYLINE="isMyLine";
    public static final String LINES_LINENAME="LineName";
    public static final String LINES_LINESTATE="LineState";
    public static final String LINES="Lines";
    public static final String ELECTRICALVEHICLES_CS1="cs1";
    public static final String ELECTRICALVEHICLES_CS0="cs0";
    public static final String ELECTRICALVEHICLES="ElectricalVehicles";
    public static final String LOADS_TOTALCONSUMPTION="totalConsumption";
    public static final String LOADS_LOADNAME="loadName";
    public static final String LOADS_LOADCOUNT="loadCount";
    public static final String LOADS="Loads";

  /**
   * Constructor
  */
  private SENSOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema loadsSchema = new ConceptSchema(LOADS);
    add(loadsSchema, SENSimulatorOntology.Loads.class);
    ConceptSchema electricalVehiclesSchema = new ConceptSchema(ELECTRICALVEHICLES);
    add(electricalVehiclesSchema, SENSimulatorOntology.ElectricalVehicles.class);
    ConceptSchema linesSchema = new ConceptSchema(LINES);
    add(linesSchema, SENSimulatorOntology.Lines.class);
    ConceptSchema fundamentalLoopsSchema = new ConceptSchema(FUNDAMENTALLOOPS);
    add(fundamentalLoopsSchema, SENSimulatorOntology.FundamentalLoops.class);
    ConceptSchema switchsSchema = new ConceptSchema(SWITCHS);
    add(switchsSchema, SENSimulatorOntology.Switchs.class);
    ConceptSchema neighborsSchema = new ConceptSchema(NEIGHBORS);
    add(neighborsSchema, SENSimulatorOntology.Neighbors.class);
    ConceptSchema generatorsSchema = new ConceptSchema(GENERATORS);
    add(generatorsSchema, SENSimulatorOntology.Generators.class);
    ConceptSchema nodeSchema = new ConceptSchema(NODE);
    add(nodeSchema, SENSimulatorOntology.Node.class);
    ConceptSchema busSchema = new ConceptSchema(BUS);
    add(busSchema, SENSimulatorOntology.Bus.class);

    // adding AgentAction(s)
    AgentActionSchema changeLineStateSchema = new AgentActionSchema(CHANGELINESTATE);
    add(changeLineStateSchema, SENSimulatorOntology.ChangeLineState.class);

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema statusNodeSchema = new PredicateSchema(STATUSNODE);
    add(statusNodeSchema, SENSimulatorOntology.StatusNode.class);
    PredicateSchema neighborhoodSchema = new PredicateSchema(NEIGHBORHOOD);
    add(neighborhoodSchema, SENSimulatorOntology.Neighborhood.class);
    PredicateSchema spreadingMessageSchema = new PredicateSchema(SPREADINGMESSAGE);
    add(spreadingMessageSchema, SENSimulatorOntology.SpreadingMessage.class);
    PredicateSchema searchingNeighborsSchema = new PredicateSchema(SEARCHINGNEIGHBORS);
    add(searchingNeighborsSchema, SENSimulatorOntology.SearchingNeighbors.class);
    PredicateSchema reportAloneAgentStateSchema = new PredicateSchema(REPORTALONEAGENTSTATE);
    add(reportAloneAgentStateSchema, SENSimulatorOntology.ReportAloneAgentState.class);
    PredicateSchema voltageBeforeBlackoutSchema = new PredicateSchema(VOLTAGEBEFOREBLACKOUT);
    add(voltageBeforeBlackoutSchema, SENSimulatorOntology.VoltageBeforeBlackout.class);
    PredicateSchema agentStateSchema = new PredicateSchema(AGENTSTATE);
    add(agentStateSchema, SENSimulatorOntology.AgentState.class);
    PredicateSchema loopRequestSchema = new PredicateSchema(LOOPREQUEST);
    add(loopRequestSchema, SENSimulatorOntology.LoopRequest.class);
    PredicateSchema loopManagerSchema = new PredicateSchema(LOOPMANAGER);
    add(loopManagerSchema, SENSimulatorOntology.LoopManager.class);


    // adding fields
    loadsSchema.add(LOADS_LOADCOUNT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    loadsSchema.add(LOADS_LOADNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    loadsSchema.add(LOADS_TOTALCONSUMPTION, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    electricalVehiclesSchema.add(ELECTRICALVEHICLES_CS0, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    electricalVehiclesSchema.add(ELECTRICALVEHICLES_CS1, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    linesSchema.add(LINES_LINESTATE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    linesSchema.add(LINES_LINENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    linesSchema.add(LINES_ISMYLINE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    fundamentalLoopsSchema.add(FUNDAMENTALLOOPS_LINENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fundamentalLoopsSchema.add(FUNDAMENTALLOOPS_LINESTATE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fundamentalLoopsSchema.add(FUNDAMENTALLOOPS_NODESTATE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fundamentalLoopsSchema.add(FUNDAMENTALLOOPS_LOOP, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fundamentalLoopsSchema.add(FUNDAMENTALLOOPS_LINELOOP, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fundamentalLoopsSchema.add(FUNDAMENTALLOOPS_NODENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fundamentalLoopsSchema.add(FUNDAMENTALLOOPS_LINESTATELOOP, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    switchsSchema.add(SWITCHS_SWITCHCOUNT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    switchsSchema.add(SWITCHS_SWITCHSTATE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    switchsSchema.add(SWITCHS_SWITCHNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    neighborsSchema.add(NEIGHBORS_NEIGHBORCOUNT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    neighborsSchema.add(NEIGHBORS_NEIGHBORNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    generatorsSchema.add(GENERATORS_TOTALGENERATION, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    generatorsSchema.add(GENERATORS_GENERATORCOUNT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    generatorsSchema.add(GENERATORS_GENERATORNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    nodeSchema.add(NODE_ANGLE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    nodeSchema.add(NODE_INFAULT, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    nodeSchema.add(NODE_BUSNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    nodeSchema.add(NODE_VOLTAGE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    busSchema.add(BUS_ELECTRICALVEHICLES, electricalVehiclesSchema, ObjectSchema.OPTIONAL);
    busSchema.add(BUS_GENERATORS, generatorsSchema, ObjectSchema.OPTIONAL);
    busSchema.add(BUS_LOADS, loadsSchema, ObjectSchema.OPTIONAL);
    busSchema.add(BUS_NEIGHBORS, neighborsSchema, ObjectSchema.OPTIONAL);
    busSchema.add(BUS_NODE, nodeSchema, ObjectSchema.OPTIONAL);
    busSchema.add(BUS_SWITCHS, switchsSchema, ObjectSchema.OPTIONAL);
    changeLineStateSchema.add(CHANGELINESTATE_LINESTATE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    changeLineStateSchema.add(CHANGELINESTATE_LINENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    statusNodeSchema.add(STATUSNODE_NODE, nodeSchema, ObjectSchema.OPTIONAL);
    neighborhoodSchema.add(NEIGHBORHOOD_NEIGHBORS, neighborsSchema, ObjectSchema.OPTIONAL);
    spreadingMessageSchema.add(SPREADINGMESSAGE_FUNDAMENTALLOOPS, fundamentalLoopsSchema, ObjectSchema.OPTIONAL);
    searchingNeighborsSchema.add(SEARCHINGNEIGHBORS_LINE, linesSchema, ObjectSchema.OPTIONAL);
    reportAloneAgentStateSchema.add(REPORTALONEAGENTSTATE_REPORTALONEAGENTSTATE, nodeSchema, ObjectSchema.OPTIONAL);
    voltageBeforeBlackoutSchema.add(VOLTAGEBEFOREBLACKOUT_VBEFOREBLACKOUT, nodeSchema, ObjectSchema.OPTIONAL);
    agentStateSchema.add(AGENTSTATE_BUS, busSchema, ObjectSchema.OPTIONAL);
    loopRequestSchema.add(LOOPREQUEST_LOOPREQUEST, fundamentalLoopsSchema, ObjectSchema.OPTIONAL);
    loopManagerSchema.add(LOOPMANAGER_LOOPMANAGER, fundamentalLoopsSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
